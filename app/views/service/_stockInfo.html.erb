<%
# [1] 주식종목코드 가져오는 첫번째 방법 - csv에서 호출 > db 생성 및 저장 > 다음증권 크롤링
  # csv에서 db생성 - 한번만
              # filename = Rails.root.join('stocks.csv')
              # CSV.foreach(filename) do |row|
              #    puts row[0]
              #    puts row[1]
              #    @stockname = row[0]
              #    @stockcode = row[1].to_i
              #    Stock.create(name: @stockname, code: @stockcode) #단수로
              #    # use row here...
              # end

    # @keyword = params[:keyword]

    # db에서 종목코드탐색
    # @result = Stock.find_by("name LIKE ?", "%#{@keyword}%")
    #   puts @result.inspect
    # @Code = @result.code
    #   puts @Code

# [2] 주식종목코드 가져오는 두번째 방법 - 한국예탁결제원 주식종목코드API > 다음증권 크롤링
    #주식종목코드API 사용시
    @keyword = params[:keyword]
    key = "rpPNq6qHiRzGIWy5TseuMtDGujDtmv2mkajUVifmHD0Sp%2Bo54J8uyJUzbC1t83MJUVC22Q8SSASrDGUdRIcN4w%3D%3D"
    stock_api = URI.encode("http://api.seibro.or.kr/openapi/service/StockSvc/getStkIsinByNmN1?secnNm=#{@keyword}&pageNo=1&numOfRows=5&ServiceKey=")+key
    response_stock = RestClient.get(stock_api)
    stockInfo = Nokogiri::XML(response_stock)
    # @stockcode = stockInfo.css()
    @doc1 = Array.new()
    @doc1 = stockInfo.xpath("//item")
    puts @keyword
    cnt=-1
    # puts arr[0].("//korSecnNm")
    @doc1.xpath("//korSecnNm").each do |i|
      cnt+=1
      if i.inner_text == @keyword
        @stockcode = @doc1.xpath("//shotnIsin")[cnt].inner_text
        puts @stockcode
      end
    end
    if cnt==-1
      @alarm = "해당하는 종목이 없습니다."
      puts "해당하는 종목이 없습니다."
    end

    # arr.each do |i|
    #   puts i.xpath("//korSecnNm").inner_text
    #   if i.xpath("//korSecnNm").inner_text == @keyword
    #       @code = i.xpath("//shotnIsin").inner_text
    #       puts @code
    #   else
    #       puts "해당하는 종목이 없습니다."
    #   end
    #   # puts i.inner_text
    #   # if i.inner_text==@keyword
    #     # @
    # end

    # if @stock == korSecnNm
    #   @stockcode = @stockstockInfo.xpath("//item//shotnIsin").text
    #   @stockcode = @stocks.xpath("//item//shotnIsin").text

    # puts @stockcode


    #4.주가정보 획득
    #크롤러 사용 - 다음 주식정보
    stock_url = URI.encode("http://finance.daum.net/item/news.daum?code=" + @stockcode.to_s)
    @response = RestClient.get(stock_url)
    #@weather_info = Nokogiri::XML(response_weather)
    #puts @response
    doc= Nokogiri::HTML(@response)
    @cost = doc.css("em.curPrice").text
    puts @cost
#       url = "https://ko.wikipedia.org/wiki/#{keyword}dddd"
#               response = RestClient.get(URI.encode(url))
#               doc = Nokogiri::HTML(response)
#               elementType = doc.css("table.infobox").children[9].text.strip.split[2]
#               bot_message = elementType
# topWrap > div.topInfo > ul.list_stockrate > li:nth-child(1) > em
    # @fcstDate = @doc2.xpath("//item//fcstDate")
    #//*[@id="topWrap"]/div[1]/ul[2]/li[1]/em
    # @weather_info = Nokogiri::Slop <<-EOXML
    #   #{stockInfo}
    # EOXML
    # # puts @weather_info.response.body.items
    # arr = @weather_info.response.body.items.item #array 선언 후 하나씩 검색
    # @Water = Array.new()
    # @Sky = Array.new()
%>
